/* src/components/header.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	append,
	attr,
	component_subscribe,
	detach,
	element,
	empty,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	set_style,
	space
} from "../../_snowpack/pkg/svelte/internal.js";

import { getContext, onMount } from "../../_snowpack/pkg/svelte.js";

function create_if_block(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*user*/ ctx[0]) return create_if_block_1;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block = current_block_type(ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d(detaching) {
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (39:8) {:else}
function create_else_block(ctx) {
	let button;
	let mounted;
	let dispose;

	return {
		c() {
			button = element("button");
			button.textContent = "Log In";
			attr(button, "class", "bg-spotify-green text-white px-3 py-2 rounded-md text-sm font-medium");
		},
		m(target, anchor) {
			insert(target, button, anchor);

			if (!mounted) {
				dispose = listen(button, "click", /*logIn*/ ctx[3]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

// (37:8) {#if user}
function create_if_block_1(ctx) {
	let button;
	let mounted;
	let dispose;

	return {
		c() {
			button = element("button");
			button.textContent = "Log Out";
			attr(button, "class", "bg-spotify-green text-white px-3 py-2 rounded-md text-sm font-medium");
		},
		m(target, anchor) {
			insert(target, button, anchor);

			if (!mounted) {
				dispose = listen(button, "click", /*logOut*/ ctx[4]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let div2;
	let div1;
	let p;
	let t1;
	let div0;
	let if_block = !/*loading*/ ctx[1] && create_if_block(ctx);

	return {
		c() {
			div2 = element("div");
			div1 = element("div");
			p = element("p");
			p.textContent = "Awesome Spotify";
			t1 = space();
			div0 = element("div");
			if (if_block) if_block.c();
			attr(p, "class", "text-spotify-green text-2xl md:text-4xl font-bold header-text");
			attr(div1, "class", "w-full flex justify-between lg:w-3/4 xl:w-3/5");
			attr(div2, "class", "w-full flex justify-center pt-10 pb-5 px-6");
			set_style(div2, "background-color", "#111111");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div1);
			append(div1, p);
			append(div1, t1);
			append(div1, div0);
			if (if_block) if_block.m(div0, null);
		},
		p(ctx, [dirty]) {
			if (!/*loading*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(div0, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div2);
			if (if_block) if_block.d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $client;
	const client = getContext("client");
	component_subscribe($$self, client, value => $$invalidate(5, $client = value));
	let user;
	let loading = true;

	onMount(async () => {
		const response = await $client.get(`/api/user/get`);

		if (response.ok) {
			$$invalidate(0, user = response.body);
			$$invalidate(1, loading = false);
		}
	});

	const logIn = async () => {
		const response = await $client.get(`/api/login`);

		if (response.ok) {
			location.href = response.body.url;
		}
	};

	const logOut = async () => {
		const response = await $client.get(`/api/logout`);

		if (response.ok) {
			location.reload();
		}
	};

	return [user, loading, client, logIn, logOut];
}

class Header extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Header;