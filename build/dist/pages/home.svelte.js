import './home.svelte.css.proxy.js';
/* src/pages/home.svelte generated by Svelte v3.38.2 */
import {
	HtmlTag,
	SvelteComponent,
	append,
	attr,
	component_subscribe,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	empty,
	init,
	insert,
	listen,
	mount_component,
	noop,
	safe_not_equal,
	set_data,
	set_style,
	space,
	text,
	transition_in,
	transition_out
} from "../../_snowpack/pkg/svelte/internal.js";

import Header from "../components/header.svelte.js";
import { link } from "../../_snowpack/pkg/svelte-spa-router.js";
import { getContext, onDestroy, onMount } from "../../_snowpack/pkg/svelte.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[15] = list[i];
	child_ctx[17] = i;
	return child_ctx;
}

// (163:8) {:else}
function create_else_block_1(ctx) {
	let div;
	let p0;
	let t1;
	let p1;
	let span;
	let t3;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			p0 = element("p");
			p0.textContent = "Find Lyrics";
			t1 = space();
			p1 = element("p");
			span = element("span");
			span.textContent = "Log in with Spotify";
			t3 = text(" to access");
			attr(p0, "class", "text-3xl font-bold mb-1");
			attr(span, "class", "cursor-pointer link");
			attr(div, "class", "p-10 text-white");
			set_style(div, "background", "#212020");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, p0);
			append(div, t1);
			append(div, p1);
			append(p1, span);
			append(p1, t3);

			if (!mounted) {
				dispose = listen(span, "click", /*logIn*/ ctx[10]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

// (141:8) {#if user}
function create_if_block_1(ctx) {
	let t;
	let if_block1_anchor;
	let if_block0 = /*findLyricsError*/ ctx[6] != "No currently playing song" && create_if_block_3(ctx);

	function select_block_type_1(ctx, dirty) {
		if (/*lyrics*/ ctx[2]) return create_if_block_2;
		return create_else_block;
	}

	let current_block_type = select_block_type_1(ctx, -1);
	let if_block1 = current_block_type(ctx);

	return {
		c() {
			if (if_block0) if_block0.c();
			t = space();
			if_block1.c();
			if_block1_anchor = empty();
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t, anchor);
			if_block1.m(target, anchor);
			insert(target, if_block1_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*findLyricsError*/ ctx[6] != "No currently playing song") {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_3(ctx);
					if_block0.c();
					if_block0.m(t.parentNode, t);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (current_block_type === (current_block_type = select_block_type_1(ctx, dirty)) && if_block1) {
				if_block1.p(ctx, dirty);
			} else {
				if_block1.d(1);
				if_block1 = current_block_type(ctx);

				if (if_block1) {
					if_block1.c();
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			}
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t);
			if_block1.d(detaching);
			if (detaching) detach(if_block1_anchor);
		}
	};
}

// (133:6) {#if loading}
function create_if_block(ctx) {
	let div1;

	return {
		c() {
			div1 = element("div");

			div1.innerHTML = `<img src="vinyl.png" alt="" class="custom-img-size rotate svelte-1kjgs54"/> 
          <div class="mt-5 xl:mt-0 xl:ml-5"><p class="text-2xl sm:text-3xl md:text-4xl font-bold mb-1">Finding Lyrics...</p></div>`;

			attr(div1, "class", "currently-playing-info items-center p-10 bg-spotify-green svelte-1kjgs54");
			set_style(div1, "color", "#111111");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(div1);
		}
	};
}

// (142:10) {#if findLyricsError != "No currently playing song"}
function create_if_block_3(ctx) {
	let div1;
	let img;
	let img_src_value;
	let t0;
	let div0;
	let p0;
	let t1;
	let t2;
	let p1;
	let each_value = /*artists*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div1 = element("div");
			img = element("img");
			t0 = space();
			div0 = element("div");
			p0 = element("p");
			t1 = text(/*song*/ ctx[1]);
			t2 = space();
			p1 = element("p");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			if (img.src !== (img_src_value = /*imageUrl*/ ctx[3])) attr(img, "src", img_src_value);
			attr(img, "alt", "");
			attr(img, "class", "border custom-img-size svelte-1kjgs54");
			attr(p0, "class", "text-2xl sm:text-3xl md:text-4xl font-bold mb-1");
			attr(p1, "class", "text-xl md:text-2xl");
			attr(div0, "class", "mt-5 xl:mt-0 xl:ml-5");
			attr(div1, "class", "currently-playing-info items-center p-10 svelte-1kjgs54");
			set_style(div1, "background", /*bgHex*/ ctx[4]);
			set_style(div1, "color", /*txtHex*/ ctx[5]);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, img);
			append(div1, t0);
			append(div1, div0);
			append(div0, p0);
			append(p0, t1);
			append(div0, t2);
			append(div0, p1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(p1, null);
			}
		},
		p(ctx, dirty) {
			if (dirty & /*imageUrl*/ 8 && img.src !== (img_src_value = /*imageUrl*/ ctx[3])) {
				attr(img, "src", img_src_value);
			}

			if (dirty & /*song*/ 2) set_data(t1, /*song*/ ctx[1]);

			if (dirty & /*artists*/ 1) {
				each_value = /*artists*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(p1, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*bgHex*/ 16) {
				set_style(div1, "background", /*bgHex*/ ctx[4]);
			}

			if (dirty & /*txtHex*/ 32) {
				set_style(div1, "color", /*txtHex*/ ctx[5]);
			}
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (149:20) {#if i}
function create_if_block_4(ctx) {
	let t;

	return {
		c() {
			t = text(", ");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (148:18) {#each artists as artist, i}
function create_each_block(ctx) {
	let t_value = /*artist*/ ctx[15] + "";
	let t;
	let if_block = /*i*/ ctx[17] && create_if_block_4(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			t = text(t_value);
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*artists*/ 1 && t_value !== (t_value = /*artist*/ ctx[15] + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(t);
		}
	};
}

// (160:10) {:else}
function create_else_block(ctx) {
	let p;
	let t0;
	let t1;

	return {
		c() {
			p = element("p");
			t0 = text(/*findLyricsError*/ ctx[6]);
			t1 = text(" 🙁");
			attr(p, "class", "py-7 px-10 text-xl font-bold text-white");
			set_style(p, "background", "#212020");
		},
		m(target, anchor) {
			insert(target, p, anchor);
			append(p, t0);
			append(p, t1);
		},
		p(ctx, dirty) {
			if (dirty & /*findLyricsError*/ 64) set_data(t0, /*findLyricsError*/ ctx[6]);
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (155:10) {#if lyrics}
function create_if_block_2(ctx) {
	let div;
	let html_tag;
	let t0;
	let p;

	return {
		c() {
			div = element("div");
			t0 = space();
			p = element("p");
			p.innerHTML = `These lyrics were taken from <a href="https://genius.com" class="text-blue-500 hover:text-blue-700">genius.com</a>`;
			html_tag = new HtmlTag(t0);
			attr(p, "class", "text-gray-500 mt-7");
			attr(div, "class", "pt-7 pb-10 px-10 text-white");
			set_style(div, "background", "#212020");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			html_tag.m(/*lyrics*/ ctx[2], div);
			append(div, t0);
			append(div, p);
		},
		p(ctx, dirty) {
			if (dirty & /*lyrics*/ 4) html_tag.p(/*lyrics*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment(ctx) {
	let header;
	let t;
	let div2;
	let div1;
	let div0;
	let current;
	header = new Header({});

	function select_block_type(ctx, dirty) {
		if (/*loading*/ ctx[8]) return create_if_block;
		if (/*user*/ ctx[7]) return create_if_block_1;
		return create_else_block_1;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block = current_block_type(ctx);

	return {
		c() {
			create_component(header.$$.fragment);
			t = space();
			div2 = element("div");
			div1 = element("div");
			div0 = element("div");
			if_block.c();
			attr(div0, "class", "w-full lg:w-3/4 xl:w-3/5 bg-white shadow-lg");
			attr(div1, "class", "w-full flex justify-center p-5");
			attr(div2, "class", "min-h-screen");
			set_style(div2, "background", "#111111");
		},
		m(target, anchor) {
			mount_component(header, target, anchor);
			insert(target, t, anchor);
			insert(target, div2, anchor);
			append(div2, div1);
			append(div1, div0);
			if_block.m(div0, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div0, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(header.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(header.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(header, detaching);
			if (detaching) detach(t);
			if (detaching) detach(div2);
			if_block.d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $client;
	const client = getContext("client");
	component_subscribe($$self, client, value => $$invalidate(13, $client = value));
	let artists;
	let song;
	let urlSafeSong;
	let lyrics;
	let imageUrl;
	let bgHex;
	let txtHex;
	let findLyricsError;
	let user;
	let loading = true;
	let lookupInterval;

	onMount(async () => {
		const userResponse = await $client.get(`/api/user/get`);

		if (userResponse.ok) {
			$$invalidate(7, user = userResponse.body);
		}

		if (user) {
			const lyricResponse = await $client.get(`/api/lyrics/find`);

			if (lyricResponse.ok) {
				$$invalidate(0, artists = lyricResponse.body.Artists);
				$$invalidate(1, song = lyricResponse.body.Song);
				urlSafeSong = lyricResponse.body.URLSafeSong || "";
				$$invalidate(2, lyrics = lyricResponse.body.Lyrics);
				$$invalidate(3, imageUrl = lyricResponse.body.ImageURL);
				$$invalidate(4, bgHex = lyricResponse.body.BgHex);
				$$invalidate(5, txtHex = lyricResponse.body.TxtHex);
				$$invalidate(6, findLyricsError = lyricResponse.body.Error);
			}
		}

		lookupInterval = setInterval(autoDetectNewSong, 5000);
		$$invalidate(8, loading = false);
	});

	onDestroy(() => {
		clearInterval(lookupInterval);
	});

	const logIn = async () => {
		const response = await $client.get(`/api/login`);

		if (response.ok) {
			location.href = response.body.url;
		}
	};

	const autoDetectNewSong = async () => {
		if (!loading && user && !document.hidden) {
			const lyricResponse = await $client.get(`/api/lyrics/find?currentSong=${urlSafeSong.replace(" ", "%20")}`);

			if (lyricResponse.ok && lyricResponse.body.Error != "Already fetched lyrics" && lyricResponse.body.Error != "No currently playing song") {
				$$invalidate(0, artists = lyricResponse.body.Artists);
				$$invalidate(1, song = lyricResponse.body.Song);
				urlSafeSong = lyricResponse.body.URLSafeSong || "";
				$$invalidate(2, lyrics = lyricResponse.body.Lyrics);
				$$invalidate(3, imageUrl = lyricResponse.body.ImageURL);
				$$invalidate(4, bgHex = lyricResponse.body.BgHex);
				$$invalidate(5, txtHex = lyricResponse.body.TxtHex);
				$$invalidate(6, findLyricsError = lyricResponse.body.Error);
			}
		}
	};

	return [
		artists,
		song,
		lyrics,
		imageUrl,
		bgHex,
		txtHex,
		findLyricsError,
		user,
		loading,
		client,
		logIn
	];
}

class Home extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Home;